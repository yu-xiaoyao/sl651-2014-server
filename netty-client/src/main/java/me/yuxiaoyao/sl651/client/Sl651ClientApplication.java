package me.yuxiaoyao.sl651.client;

import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.binary.Hex;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.nio.file.Files;
import java.util.*;
import java.util.function.Consumer;

/**
 * @author KerryMiBook on 24/11/8
 */


public class Sl651ClientApplication {

    private static final Logger logger = LoggerFactory.getLogger(Sl651ClientApplication.class);

    private static Map<Integer, List<String>> INNER_HEX = new HashMap<>();

    //private static final String TEST_JPG = "./doc/a.jpg";
    private static final String TEST_JPG = "D:\\Code\\github-yu\\sl651-2014\\sl651-2014-server\\doc\\a.jpg";

    static {
        initInner();
    }

    public static DeviceConfig DEVICE = DeviceConfig.builder()
            .stationId((byte) 1)
            .telemetryId("0012345678")
            .stationType("48")
            .password("1234")
            .build();


    public static void main(String[] args) throws InterruptedException {

        var client = new TcpClient("127.0.0.1", 5555);
        new Thread(client).start();
        Scanner scanner = new Scanner(System.in);
        String input;
        while (true) {
            input = scanner.nextLine();
            if (input.startsWith("0x") || input.length() == 2) {
                if (input.startsWith("0x")) {
                    input = input.substring(2);
                }

                List<String> send;
                int p = input.indexOf(",");
                if (p == -1) {
                    send = INNER_HEX.get(Integer.parseInt(input, 16));
                } else {
                    String[] split = input.split(",");
                    var hexs = INNER_HEX.get(Integer.parseInt(split[0], 16));
                    int num = Integer.parseInt(split[1]);
                    send = Collections.singletonList(hexs.get(num));
                }

                if (send == null || send.isEmpty()) {
                    continue;
                }
                for (int i = 0; i < send.size(); i++) {
                    if (i > 0) {
                        //break;
                        Thread.sleep(1000L);
                    }
                    String hex = send.get(i);
                    try {
                        byte[] bytes = Hex.decodeHex(hex);
                        System.out.println("发送. code = " + input + ", hex = " + hex);
                        client.sendBytes(bytes);
                    } catch (DecoderException e) {
                        System.out.println("数据异常. cause: " + hex + ", cause: " + e.getMessage());
                    }
                }

            } else if ("quit".equalsIgnoreCase(input) || "q".equalsIgnoreCase(input)) {
                break;
            } else if ("file".equalsIgnoreCase(input)) {
                // 0x36 模拟发送文件
                sendFile(bytes -> client.sendBytes(bytes));
            } else {
                if (!input.trim().isBlank()) {
                    try {
                        byte[] bytes = Hex.decodeHex(input);
                        System.out.println("发送. hex = " + input);
                        client.sendBytes(bytes);
                    } catch (DecoderException e) {
                        System.out.println("数据异常. cause: " + input + ", cause: " + e.getMessage());
                    }
                }
            }
        }
        logger.info("stop client");
        client.close();
    }


    public static List<String> getHex(int funcCode) {
        return INNER_HEX.get(funcCode);
    }

    /**
     * sample:
     * https://blog.csdn.net/weixin_42163707/article/details/127638544
     */
    private static void initInner() {


        // 链路维持报文
        INNER_HEX.put(0x2F, List.of("7E7E01001234567812342F0008020003591011155111036BCA"));
        // 测试报文
        INNER_HEX.put(0x30, List.of("7E7E010012345678123430002B020003591011154947F1F1001234567848F0F0591011154920190000052619000005392300000127381211150320FA"));
        // 遥测站定时报
        INNER_HEX.put(0x32, List.of("7E7E05001122334403E832002B020034170718110016F1F1001122334448F0F01707181100201900004026190000403923000104903812109903A421"));
        // 遥测站加报报
        INNER_HEX.put(0x33, List.of("7E7E05001122334403E833002B020026170718102202F1F1001122334448F0F01707181022201900004026190000403923000104903812110203F511"));
        // 遥测站小时报
        INNER_HEX.put(0x34, List.of("7E7E05001122334403E8340068020033170718110014F1F1001122334448F0F01707181005F4600500000014FFFFFFFFFF0000F0F017071811002619000040F0F01707181005F5C0000C000C001C00310031FFFFFFFFFFFFFFFFFFFF00310031F0F0170718110039230001049020190000403812109903F502"));
        // 遥测站人工置数报
        INNER_HEX.put(0x35, List.of("7E7E0100123456781234350011020004591011155145F2F251312E32333420034602"));
        // 中心站查询遥测站实时数据
        INNER_HEX.put(0x37, List.of("7E7E010012345678123437002B020009591011161403F1F1001234567848F0F0591011161420190000152619000015392300000122381211080338FE"));
        // 中心站查询遥测站时段数据
        INNER_HEX.put(0x38, List.of("7E7E05001122334403E838002A020035170718110128F1F1001122334448F0F017071810050418000005F4600500000014FFFFFFFFFF000003E8AB"));
        // 中心站查询遥测站人工置数
        INNER_HEX.put(0x39, List.of("7E7E0100123456781234390011020014170718100630F2F25120312E3233340346AA"));
        // 中心站查询遥测站指定要素数据
        INNER_HEX.put(0x3A, List.of("7E7E05001122334403E83A0025020037170718110226F1F1001122334448F0F01707181005F4600500000014FFFFFFFFFF000003074E"));

        // 中心站修改遥测站基本配置表
        INNER_HEX.put(0x40,
                List.of("7E7E010012345678123440004D02001B170718101458F1F1001234567801200500000002280011223344045002218094153172009708053801A130123456780C08020D4080010000000000000F6831303133313132333435363738032B4C"));
        //  中心站读取遥测站基本配置表
        INNER_HEX.put(0x41, List.of("7E7E050011223344123441005102001E170718101813F1F100112233440120050000000228001122334403101234045002218094153172009708053801A130123456780C08020D4080010000000000000F6831303133313132333435363738036F60"));

        // 中心站修改遥测站运行配置表
        INNER_HEX.put(0x42,
                List.of("7E7E050011223344123442003F02001F170718101913F1F1001122334420080121080522080823100300240805250910260910270802282300010000301B0002003812050040120003411200200342A6"));
        //  中心站读取遥测站运行配置表
        INNER_HEX.put(0x43, List.of("7E7E050011223344123443003F020020170718101935F1F1001122334420080121080522080823100300240805250910260910270802282300010000301B00020038120500401200034112002003AF1B"));

        // 中心站查询水泵电机实时工作数据
        //FIXME 手动组装生成....
        INNER_HEX.put(0x44, List.of("7E7E0500112233441234440035020020170718110226F1F1001122334448F0F01707181005701902200371190220037219022003731902200374190220037519022003037E6D"));

        // 中心站查询遥测站软件版本
        INNER_HEX.put(0x45, List.of("7E7E0500112233441234450021020022170718101955F1F10011223344114441544138362D53572D56312E3228482903C476"));
        // 查询遥测站状态和报警信息46
        INNER_HEX.put(0x46, List.of("7E7E0500112233441234460015020023170718102008F1F100112233444520000004000315C1"));

        // 初始化固态存储数据47
        INNER_HEX.put(0x47, List.of("7E7E05001122334403E847000F02003A170718110347F1F100112233440305BD"));
        // 恢复终端出厂设置48
        INNER_HEX.put(0x48, List.of("7E7E05001122334403E848000F02003B170718110432F1F1001122334403B3C3"));
        // 修改密码49
        INNER_HEX.put(0x49, List.of("7E7E0500112233441234490013020024170718102024F1F10011223344031003E803CEC8"));
        // 设置遥测站时钟4A
        INNER_HEX.put(0x4A, List.of("7E7E05001122334403E84A000F020025170718102149F1F10011223344032D27"));

        // 50
        INNER_HEX.put(0x50, List.of("7E7E00112233440503E850004F020040170718102149F1F111223344051111222233334444555566667777888899991111222233334444555566667777888899990000000000000000000000000000000000000000000000000000000005369F"));
        // 51
        INNER_HEX.put(0x51, List.of("7E7E001234567891123451000F02027E210409084605F1F11234567891036D55"));


        // 36 图片
        INNER_HEX.put(0x36, List.of(
                "7E7E010012345678123436011C1600D0010005591011161118F1F1001234567848F0F05910111611F3F3FFD8FFE000104A46494600010100000100010000FFDB004300090606070606090707070909090A0C150D0C0C0C0C1912130F151E191F1E1C191C1C21242E2721222B221C1C2837282B30313434341F27393D39333C2E333431FFDB0043010909090C0A0C180D0D1831211C213131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131FFC4001F0000010501010101010100000000000000000102030405060708090A0BFFC400B5100002010303020403050504040000017D01020300041105122131410613516107227114328191A1082342B1C11552D1F02433627282090A161718191A1796CB",
                "7E7E01001234567812343601031600D00225262728292A3435363738393A434445464748494A535455565758595A636465666768696A737475767778797A838485868788898A92939495969798999AA2A3A4A5A6A7A8A9AAB2B3B4B5B6B7B8B9BAC2C3C4C5C6C7C8C9CAD2D3D4D5D6D7D8D9DAE1E2E3E4E5E6E7E8E9EAF1F2F3F4F5F6F7F8F9FAFFC4001F0100030101010101010101010000000000000102030405060708090A0BFFC400B51100020102040403040705040400010277000102031104052131061241510761711322328108144291A1B1C109233352F0156272D10A162434E125F11718191A262728292A35363738393A434445464748494A535455565758595A636465666768696A73741759D8",
                "7E7E01001234567812343601031600D00375767778797A82838485868788898A92939495969798999AA2A3A4A5A6A7A8A9AAB2B3B4B5B6B7B8B9BAC2C3C4C5C6C7C8C9CAD2D3D4D5D6D7D8D9DAE2E3E4E5E6E7E8E9EAF2F3F4F5F6F7F8F9FAFFC00011080078008003012100021101031101FFDD00040002FFDA000C03010002110311003F00CE5F0D693C7FA20FFBEDBFC6A55F0D692707EC9D3FE9A37F8D5FB79F4667ECE26B410AC3124483088A154649C003039A942E6B26DC9DD9692D8FFFD0D10BF95417FF0025B31F751FA8159CB61A4796EB103DBEAD74B29E4CECE3E8C770FD08AEE3C12A174881474C487FF221A5D110B5933FFFD1D32B4D2B53D02D61856A32B4D09A3FFFD299D7009A8996176456",
                "7E7E01001234567812343601031600D00482085D38AAD3AFC8DEB838A0968FFFD36B5ED9C0E526BA82365EAAD20047EB4C935DD2A02375EC6D9E9B3E7FE59A8BA15869F13E90A8585C3391FC2226C9FCC62A24F1869E71FE8F7433D7E55FFE2A97322AC7FFD4B3A4EA70EAF0C93411C88B14BE51F300193B55B2304F1861FAD58BB8F7DBBFB0CFE5CD67BA2B63CBFC4EEADAFCF18653265005CF3F71715D7781DE6FB0F913C2F1F9723471EE52370E1B3CFB923F0A4FE14671F899FFD5D8D94857E952318CB81D2A32BC66988FFFD6B8CBC542E941242EA6A174CD324FFFD7F3C000E00A70AC1948781522D2651FFFD0A7E0DB8794DC5B971E5C514642003825A4CB7E2028FF0080D74E630EA5597208C1179267",
                "7E7E01001234567812343601031600D00515942F6346B5016F173FBA8FFEF91408630721141F50314D45224FFFD1DD2831D290A77F5A9631852A364E29833FFFD2D165A89D29A132174A81D7834127FFD3F3D5A70E2B16521EA2A45152523FFFD4CCF05CAAB7CD0AA0CCB13348DEC8C9B47FE3EF5DA05FA5651D8D1EE382E791D28DA3FC8AAD047FFFD5E8CAD34AD4F528615A615E2A847FFFD6D764A85D68132074A85D7154C967FFD7F3E03D69E01158B290F415201505A3FFD0C6F0834516B1148CDF3C88F6E8BEB902427FF217EB5DE818AC62CD6C4816976D5F411FFFD1EA4AD34A522C632FE551B2FB53259FFFD2DC65EBC542EBC74A7602174E3A542EA31CD0433FFFD3F3F14F158B290F51522817617A",
                "7E7E01001234567812343601031600D006A92CFFD4C2F0BA31D6AD183284472CF9EF946503FEFA65AF465538F4AC61A9B3240BEA29C16B4259FFD5EBF6534AD245D88D978E462A375C723A5311FFD6E8197D6A274A77EC0C8197039A81D69EE433FFD7E007A53C0AC5968900E6A451D2A4A47FFFD0E6B4A1236A368919396BA87383D84AA4FF002AF524526B286C6AD12007D69C0679E78AD047FFD1ED0AF3E83F953197B5058C65A8980F4A04CFFFD2E918542E3231548190B8EB5038CD3F521AE87FFFD3E1E3B3B871F2C321FF00809ABB1683A948015B39307A12315932D1760F09EA9228263451E8CD8ABF6FE09BB71992E238CFA0E6972948FFD4B3A4F8412C6E62B97BA6678D830555C03F9D7508175A3C",
                "7E7E01001234567812343601031600D007B8E833CD6518D99B3772403B7E54EC77E715A224FFD5EDF6D34AF63458B18577703AD5679E05620CD1823A8DC38A76BE827A1FFFD6E8E4BAB644DED3478E9C364FE42A9CBAA58A0F9E7001E3EEB7F855D84DA281D76D5A56884731DAA087C0C3673D39CF18F4EF4926A5132FEEE372DE8D803FAD3488723FFFD7AD61A8DA69A9E5DE5E5ADB46DCC625915327F8B19EBFC3535CF8C7C3D62019B57B66DDD3C96F34FF00E399C7E3555E36A8D0A9CBDD444DF11FC2D1C6EE351691946422C1265BD86540FCC8AA89F177C3E082D69A9E3DA28FFF008BACECCBBA3FFFD0C29FE32C69338B5D0A59611CA3C9701188C75202B01F99A82EBE32EA570231A66896F01F178FF3",
                "7E7E01001234567812343601031600D008E333CAD36EF4C60263F5A4AC86E7D87A7C4CF16CD6E5FF00B2ED111C61664B790E0FB12C467EA0D69683E2BD7E7B7717B74C64439DED0C6A587D028E9F4A1684B9B6CFFFD11B5EB8790BBDD5C12DD76E540FC381F953A4D69D94C6EF3C8BE85B8FE755CC88D58E86F6395D630AC0907AE302A66AA52B92D58FFFD29243E959F7E4ED4E7F8FFA1AD8C595D0F3EE6AC46DC0EF5223FFD3E2F5BD0A6D6ED6DE6F35CCC92B291B7236E01CF1F4ACF4F02B9032D719FF00AE75D18C5CB57D4C68B6E2695BF8063310592D59DBBB0936E7F0CD6A69FE0486205FEC7082C36959887FC7A115C6E46EA2CFFFD4C66F0A5BD8CF1836D000C0B065C9C107E9EFEBEBE95B4917F958",
                "7E7E01001234567812343601031600D009E1A4B9D93BCA85DC02C4C3938F4CE6B2E66D96A9E85C8FC3566836ABCCA3A000A8C7E95663D06C9102B46D21C7DE6720FE9814D6A3E547FFD5AFE248AE34E28DA45B8612DBDC2F31893F7C36F9606ECE0F0FC7D6B3D9754932EF24690AB2CE19235493CA23CA203280C0F9849EBDA924293B1B9A0596A16D697C9A85CB5D3C691DAEE924662AF133176193FC40A8FC3D8548CD571D1B42934D267FFFD6576ACFD40BF90CC8A19D79505B009F735AB3128A5D117090B464332B36410460151F5FE2F4AB30DD44FB46FDA5C654382AC7F03CD242B1FFD7CBB197CBB9108FBAC99FC6B5D0FB575661F1C7D3F566587D9FA9623156A3AE0B1D48FFD09FC45B3FB3821725AF",
                "7E7E01001234567812343601031600D00ACB38B74328265F3026DC027EF1E95A1A4CE6E6C629B746C08214C64152A0900823AE401CD676EA6B7B68682A67B66AC02A50288D4119C9E726A920B9FFD1BDE2BBA6D3974B951576FF0068A9208EB88E46FE62B853A8DE8D3E27760545B5A47B56552799CB1F941CE0FAF4F7CD16EC12B5CE8BC317935CDCDCC0F3798EEB76E88338256551F9F2055C671550D0991FFFD28DDAA95E37EE8FE1FCEB432654400C81C81900807BF38FF0AB51E1B83C834893FFD3C481F6DF5A31380CA47E9FFD7ADE8FE95D9982B4A2FF00ADCC70EF468B31F6AB512922B86D73A51FFFD4B5E26B36BAD02F6348D6494C2C2207FBC4151FCC8FC6AC785210BA25A5BE1D6482258E173D62",
                "7E7E01001234567812343601031600D00B5571CAB6D048CF7EBD6A515D6E6E24400E58FE54A854B85DD83E95A24173FFD5DBF17594136942E6690A1B39D248FB02CC7CB03F290FE95C5FF6768DA74660966329822B988BEEEAB6C018DBD3EFB1354EC9EA4CAF7D0E8BC330E950DFDCCB1801D123551B49F9A5F2CC9F9BE2A93BF14D5AC277B6A7FFD6AB2498AA578E4C4703B8FE756CC8AD1B64D5A89B06857133FFD7C08C8FB4D93386D818AE47AF6FE55D0C5927AD7A1986D1F9FE87361FA972202ADC5E99AF391D47FFD0DEB9B46BCB668524F2C920861CF420E3F1C62ADE9B6724285657492577DCDE5C7B41CF4C0C9ED81D4F4AB8C535715DDCB515DD896656BDB7051B6B0694020F707D2A86ED1D171675",
                "7E7E01001234567812343601031600D00C35BFB64F7CDBEDD0C68225664F9B058E40F9B8503838E4E73C62B55AA149AEA7FFD1DFF135EE9FACE9F71A7472CE885E375B8488153B5D5F80483DB1CE2B8D8BC37A721B917F753DE2C8D2EC789960C2CA417057E7EE3839AD2493D48E62FE96965A2CF34F6D1B4CD248AE1AE246660171B47CBB47185E719E0557792968847FFFD2CC7909EF54EEA50B13963800679ED55733B102C982BEF56E17C77A1324FFD3E5E7B99122830490B32B7D319A48FC6D0BCA523319EDB4C6C4FF004AF431FBAF9FE872D07A32C9F15CEEA9865846EC6428E7DB926A09FC6D7F13BC382C840F9810ADFA0E3F035E7DEC6DCC7FFFD4E567F196A41B646EE060ABF992B36E047D17A521",

        ));


    }


    private static void sendFile(Consumer<byte[]> consumer) {
        File file = new File(TEST_JPG);
        if (file.exists()) {
            try {
                byte[] bytes = Files.readAllBytes(file.toPath());
                List<byte[]> sendBytes = M3PacketSplitter.splitImageToM3Packets(DEVICE, bytes, 0x05);

                for (int i = 0; i < sendBytes.size(); i++) {
                    System.out.println("发送文件: " + (i + 1) + " / " + sendBytes.size());
                    //if (i > 10 && i != sendBytes.size() - 1) {
                    //    continue;
                    //}
                    //System.out.println(i + "\t" + Utils.byteArray2HexStr(sendBytes.get(i)));
                    consumer.accept(sendBytes.get(i));
                }

            } catch (Exception e) {
                e.printStackTrace();
                System.out.println("发送文件异常. cause: " + TEST_JPG + ", cause: " + e.getMessage());
            }
        } else {
            System.out.println("文件存在. cause: " + TEST_JPG);
        }
    }

}
